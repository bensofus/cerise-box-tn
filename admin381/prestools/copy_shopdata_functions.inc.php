<?php
/* functions for the copy_shopdata software */
 
function dbxquery($myconn, $query) {
global $mode, $verbose;
if($verbose == "true") echo "DB".$myconn->thread_id."-".$query;
$res = @mysqli_query($myconn, $query); 
if(!$res) { 
  $error = mysqli_error($myconn);
  $full_error = "<p>MySQL error ".mysqli_errno($myconn).": ".$error."<br>Generated by URL '".$_SERVER["PHP_SELF"]."'<br>with Query '".$query."' <p>";
  if((mysqli_errno($myconn) == "1062") && (strpos($query, "specific_price") > 0))
  { echo "<br>Index 2 of the 'specific_price' table contains the following fields: id_product,id_shop,id_shop_group,id_currency,id_country,id_group,id_customer,id_product_attribute,from_quantity,from,to";
  }
  if($mode == "background") colordie($full_error);
  else colordie($full_error);
}
else if($verbose == "true")
{ if(!strcasecmp(substr($query, 0, 6),"UPDATE"))
    echo " - ".mysqli_affected_rows($myconn)." affected";
  echo "<br>";
}
return $res;
}

/* this function checks that the shops have the same languages and creates a language $transforms table when needed */
function create_langtransform_table()
{ global $transforms,$oldlang_list,$conn,$oldconn, $newlang_list;

/* language preparations. It is important to make sure from the beginning that the languages are ok. */
/* we will implement changed language id's at the end of this script */
  $oldlangs = array();
  $oldlang_ids = array();
  $oldlang_list = array();
  $oldlang_names = array();
  $query = "SELECT * FROM "._OLD_PREFIX_."lang ORDER BY language_code"; 
  $res = dbxquery($oldconn, $query);
  while ($row=mysqli_fetch_array($res))
  { $oldlangs[] = $row;
	$oldlang_ids[] = $row["id_lang"];  /* will be used calculating transformations */
	$oldlang_list[] = $row["id_lang"];	/* will be used in lang_process() function and for ps_configuration_lang */
    $oldlang_names[] = $row["language_code"];
  }
  
  $newlangs = array();
  $newlang_ids = array();
  $newlang_list = array();
  $newlang_names = array();
  $query = "SELECT * FROM "._DB_PREFIX_."lang ORDER BY language_code"; 
  $res = dbxquery($conn, $query);
  while ($row=mysqli_fetch_array($res)) 
  { $newlangs[] = $row;
	$newlang_ids[] = $row["id_lang"];
	$newlang_list[] = $row["id_lang"];	/* will be used in lang_process() function and for ps_configuration_lang */
    $newlang_names[] = $row["language_code"];
  }

  echo sizeof($oldlangs)." old languages: ".implode(",",$oldlang_names)." (".implode(",",$oldlang_ids)."); ";
  echo sizeof($newlangs)." new languages: ".implode(",",$newlang_names)." (".implode(",",$newlang_ids)."); ";

/* if you want to process different languages without changing the names this can be done by uncommenting and adapting the transforms in the next two lines for your situation */
//    $transforms = array(array(1,2),array(7,1));
//	return;
  
  if (sizeof($oldlangs) != sizeof($newlangs))
    colordie("<p><b>Both shops need to have the same number of languages defined!</b>");
  for($i=0; $i < sizeof($oldlangs); $i++)
    if($oldlangs[$i]["language_code"] != $newlangs[$i]["language_code"])
	    colordie("<p><b>Both shops need to have the same languages defined!</b>".$oldlangs[$i]["language_code"]." != ".$newlangs[$i]["language_code"]."<br>Languages may have different id's but must have exactly the same names.");
  echo " Language check ok.<br><br>";
  
  /* now prepare the language transformations */
  /* the old shop may use other language id's as the new one */
  /* in order not to disturb the configuration data of the new shop we will change the language id's in the copied data - when needed. */
  /* note that the backoffice language is set in the employee table */
  $query = 'SELECT value FROM '._OLD_PREFIX_.'configuration WHERE name = "PS_LANG_DEFAULT"'; 
  $res = dbxquery($oldconn, $query);
  if(mysqli_num_rows($res) > 0)
  { $row = mysqli_fetch_array($res);
	$def_lang = $row["value"];
  }
  else 
	$def_lang = -1;
  
  /* both shops have the same languages installed, but possibly in another order. */
  /* Here they sorted on name: so $oldlangs[$i]["language_code"]=$newlangs[$i]["language_code"] */
  /* they may just have different id_langs */
  $transformations = array();
  $maxlangnum = 0;
  $x=0;
  for($i=0; $i < sizeof($oldlangs); $i++)
  { if($oldlangs[$i]["id_lang"] != $newlangs[$i]["id_lang"])
	{	$transformations[$x++] = array($oldlangs[$i]["id_lang"],$newlangs[$i]["id_lang"]);
		if($oldlangs[$i]["id_lang"] > $maxlangnum) $maxlangnum = $oldlangs[$i]["id_lang"]; /* note that lang id's may not be continuous: some languages may have been deleted */
		if($oldlangs[$i]["id_lang"] == $def_lang)
		{ $query = 'UPDATE '._DB_PREFIX_.'configuration SET value="'.$newlangs[$i]["id_lang"].'" WHERE name = "PS_LANG_DEFAULT"';
		  $res = dbxquery($conn, $query);
		}
	}
  }

  $maxlangnum = $maxlangnum +10; /* this is a precaution: a shop may have deleted languages and Prestashop leaves the old translations in the database */
  $transforms = array();
  if(sizeof($transformations) == 0)
    echo "<p>No language transformations needed.";
  else
  { /* old and new numbers may cross like in en=1;fr=2 => en=2;fr=1. For those cases we use auxiliary numbers */
	/* in the transforms table the extra actions needed for that are added */
	echo "<p><b>Doing the following language transformations: </b> ";
	$replacers = array();
	for($x=0; $x<sizeof($transformations); $x++)
    { if(in_array($transformations[$x][1],$oldlang_ids))
      { $pos = array_search($transformations[$x][1],$oldlang_ids);
	    if($pos > $x)
	    { $maxlangnum++;
		  $transforms[] = array($transformations[$x][1], $maxlangnum);
		  echo " ".$transformations[$x][1]."=>".$maxlangnum;
	      $oldlang_ids[$pos] = $maxlangnum;
		  $replacers[$transformations[$x][1]] = $maxlangnum;
	    }
      }
	  if(isset($replacers[$transformations[$x][0]]))
	     $transforms[] = array($replacers[$transformations[$x][0]], $transformations[$x][1]);
	  else
	     $transforms[] = array($transformations[$x][0], $transformations[$x][1]);
	  echo " ".$transformations[$x][0]."=>".$transformations[$x][1];
	}
	echo "<br>";
  }
}

function lang_process($table)
{ global $conn, $transforms,$oldlang_list;
/* Prestashop often leaves translations in deleted languages. Delete those as they can cause trouble for the transforms */
  $query = "DELETE FROM "._DB_PREFIX_.$table." WHERE id_lang NOT IN (".implode(",",$oldlang_list).")";
  $res = dbxquery($conn, $query);
  foreach($transforms AS $transform)
  { $query = "UPDATE "._DB_PREFIX_.$table." SET id_lang='".$transform[1]."' WHERE id_lang='".$transform[0]."'";
    $res = dbxquery($conn, $query);
  }
}

/* Before the first time we copy currency tables we get a copy of them that can be used for missing info */
function create_currencymap()
{ global $conn;
  if(version_compare(_PS_VERSION_ , "1.7.6", "<")) return;
  $qquery = 'SELECT value FROM '._DB_PREFIX_.'configuration WHERE name = "COPYSHOPDATA_CURRENCIES"'; 
  $qres = dbxquery($conn, $qquery);
  if(mysqli_num_rows($qres) > 0) return;  
  
  $currencyblock = array();
  $query = "SELECT * FROM "._DB_PREFIX_."currency"; 
  $res = dbxquery($conn, $query);
  while ($row=mysqli_fetch_assoc($res))
  { $currencyblock[$row["iso_code"]] = array();
    $lquery = "SELECT * FROM "._DB_PREFIX_."currency_lang WHERE id_currency=".$row["id_currency"]; 
    $lres = dbxquery($conn, $lquery);
    while ($lrow=mysqli_fetch_assoc($lres))
	{ $currencyblock[$row["iso_code"]][$lrow["id_lang"]] = $lrow;
    }
  }
  $currencyline = json_encode($currencyblock);
  $qquery = 'INSERT INTO '._DB_PREFIX_.'configuration SET name = "COPYSHOPDATA_CURRENCIES", value="'.mysqli_real_escape_string($conn,$currencyline).'"'; 
  $qres = dbxquery($conn, $qquery);
}

/* input "varchar(10)" -> output array("varchar", "10"); */
function formatter($row)
{ $arr = explode("(", $row['COLUMN_TYPE']);
  if(sizeof($arr) == 1) /* for example with text */
  { $arr[1] = "";
  }
  else
  { $pos = strpos($arr[1], ")");
    $arr[1] = substr($arr[1],0,$pos);
  }
  $row['Fieldtype'] = trim($arr[0]);
  $row['Fieldlength'] = $arr[1];
  return($row);
}

function copy_table($table)
{ global $conn, $oldconn, $copy_data_via_file, $copy_extra_old_fielders;
  global $index_fixers, $field_length_fixers, $duplicate_key_removers, $copy_mode;
  $oldlangfound = $newlangfound = false;
  $oldfields = $newfields = array();
  $oldformats = $newformats = array();
  $query = "SELECT * FROM information_schema.`COLUMNS` WHERE table_schema = '"._OLD_NAME_."' AND table_name = '"._OLD_PREFIX_.$table."'";  
  $res = dbxquery($oldconn, $query); 
  if(!$res) /* should not happen as there is a previous test */
  { echo "<br><b>Warning: table <i>".$table."</i> was not present in the old database and as a consequence was skipped!</b>";
    return;
  }
  while($row = mysqli_fetch_array($res))
  { $oldfields[] = $row['COLUMN_NAME'];
    $oldformats[$row['COLUMN_NAME']] = formatter($row);
    if($row['COLUMN_NAME'] == "id_lang")
      $oldlangfound = true;	  
  }

  $query = "SELECT * FROM information_schema.`COLUMNS` WHERE table_schema = '"._DB_NAME_."' AND table_name = '"._DB_PREFIX_.$table."'";
  $res = dbxquery($conn, $query); 
  while($row = mysqli_fetch_array($res))
  { $newfields[] = $row['COLUMN_NAME'];
    $newformats[$row['COLUMN_NAME']] = formatter($row);
    if($row['COLUMN_NAME'] == "id_lang")
      $newlangfound = true;	 
  }
  
  $oldextras = array_diff($oldfields, $newfields);
  $newextras = array_diff($newfields, $oldfields);
  if((sizeof($oldextras) > 0) || (sizeof($newextras) > 0))
  { echo "<br><b>Structure different.</b>";
    if(sizeof($oldextras) > 0)
	{ echo " <b>Extra in old:</b> ";
	  foreach($oldextras AS $extra) 
	  { echo $extra;
	    $row = $oldformats[$extra];
	    if(in_array($table, $copy_extra_old_fielders) || in_array('all', $copy_extra_old_fielders))
		{ $colquery = "ALTER TABLE "._DB_PREFIX_.$table;
		  $colquery .= " ADD `".$extra."`"; 
		  // default addition is at the end; alternative: use FIRST or AFTER col_name
		  $colquery .= " ".$row["COLUMN_TYPE"];
		  if($row["IS_NULLABLE"] == "NO")
			$colquery .= " NOT NULL";
		  if($row["COLUMN_DEFAULT"] != "")
			$colquery .= " default '".$row["COLUMN_DEFAULT"]."'";
		  $colres = dbxquery($conn, $colquery);
		  echo ' [copied]';
		}
	    echo ", ";
	  }
	}
    if(sizeof($newextras) > 0)
	{ echo " <b>Extra in new:</b> ";
	  foreach($newextras AS $extra) 
	    echo $extra.", ";
	}
  }
  
  $changed = false;
  $charsetchangers = array();
  $arr = array_intersect($oldfields, $newfields);
  foreach ($arr AS $key)
  { $str = $key.": ";
    if($oldformats[$key]['Fieldtype'] != $newformats[$key]['Fieldtype'])
	  $str .= "old=".$oldformats[$key]['Fieldtype']."; new=".$newformats[$key]['Fieldtype']."; "; 
  	if($oldformats[$key]['Fieldlength'] > $newformats[$key]['Fieldlength']) 
	{ $str .= "oldsize=".$oldformats[$key]['Fieldlength']."; newsize=".$newformats[$key]['Fieldlength']."; ";
	  if((in_array($table, $field_length_fixers) || in_array('all', $field_length_fixers)) && ($oldformats[$key]['Fieldtype'] == $newformats[$key]['Fieldtype']))
      { $lqry = "ALTER TABLE `"._DB_PREFIX_.$table."` MODIFY `".$key."` ";
        $lqry .= $newformats[$key]['Fieldtype']."(".$oldformats[$key]['Fieldlength'].")";
		$rs = dbxquery($conn, $lqry);
		if($rs) $str.="[fixed]";
	  }
	}
	if(in_array(strtolower($newformats[$key]['Fieldtype']), array('char', 'varchar','text','tinytext','mediumtext','longtext')))
	{ if($oldformats[$key]['CHARACTER_SET_NAME'] != $newformats[$key]['CHARACTER_SET_NAME']) 
	  { $str .= "Old charset=".$oldformats[$key]['CHARACTER_SET_NAME']."; New charset=".$newformats[$key]['CHARACTER_SET_NAME']."; ";
	  }
	}
	if($oldformats[$key]['IS_NULLABLE'] != $newformats[$key]['IS_NULLABLE']) 
	{ if($oldformats[$key]['IS_NULLABLE'] == "NO")	$str .= "Old: Not NULL; "; else $str .= "Old: NULL; ";
	  if($newformats[$key]['IS_NULLABLE'] == "NO")	$str .= "New: Not NULL; "; else $str .= "New: NULL; ";
	}
  	if($oldformats[$key]['COLUMN_DEFAULT'] != $newformats[$key]['COLUMN_DEFAULT']) 
	  $str .= "Old default=".$oldformats[$key]['COLUMN_DEFAULT']."; New Default=".$newformats[$key]['COLUMN_DEFAULT']."; ";
  	if($oldformats[$key]['EXTRA'] != $newformats[$key]['EXTRA']) 
	  $str .= "Old Extra:".$oldformats[$key]['EXTRA']."; New Extra:".$newformats[$key]['EXTRA']."; ";
	if($str != $key.": ")
	{ if(!$changed)
	  { $changed = true;
	    echo "<br><b>Different field formats:</b> ";
	  }
	  echo $str;
	}
  }
    
  /* now do the same for the indexes */
  /* this page lists all the index fields: https://mariadb.com/kb/en/show-index/ */
  $idxquery = "select index_name,index_type, non_unique,
       group_concat(column_name order by seq_in_index) as index_columns       
		from information_schema.statistics
		where table_schema='"._OLD_NAME_."' and table_name='"._OLD_PREFIX_.$table."'
		group by index_schema, index_name, index_type, non_unique, table_name
		order by index_schema,index_name";
  $idxres = dbxquery($oldconn, $idxquery);
  $oldidxnames = $oldindexes = [];
  while($idxrow = mysqli_fetch_array($idxres))
  { $oldidxnames[] = $idxrow["index_name"];
	$oldindexes[$idxrow[0]] = $idxrow;
  }
  
  $idxquery = "select index_name,index_type, non_unique,
       group_concat(column_name order by seq_in_index) as index_columns       
		from information_schema.statistics
		where table_schema='"._DB_NAME_."' and table_name='"._DB_PREFIX_.$table."'
		group by index_schema, index_name, index_type, non_unique, table_name
		order by index_schema,index_name";
  $idxres = dbxquery($conn, $idxquery);
  $newidxnames = $newindexes = [];
  $uniqueindexes = [];
  while($idxrow = mysqli_fetch_array($idxres))
  { $newidxnames[] = $idxrow["index_name"];
	$newindexes[$idxrow[0]] = $idxrow;
	if($idxrow["non_unique"] == "0")
	  $uniqueindexes[$idxrow[0]] = $idxrow['index_columns'];
  }

  $oldxtras = array_diff($oldidxnames, $newidxnames);
  $newxtras = array_diff($newidxnames, $oldidxnames);
  if((sizeof($oldxtras) > 0) || (sizeof($newxtras) > 0))
  { echo "<br><b>Index differences: </b>";
    if(sizeof($oldxtras) > 0)
	{ echo " <b>Extra in old:</b> ";
	  foreach($oldxtras AS $extra) 
	    echo $extra." (".$oldindexes[$extra]["index_columns"]."), ";
	}
    if(sizeof($newxtras) > 0)
	{ echo " <b>Extra in new:</b> ";
	  foreach($newxtras AS $extra) 
	    echo $extra." (".$newindexes[$extra]["index_columns"]."), ";
	}
  }
	
  $str = "";
  $changed = false;
  $arr = array_intersect($oldidxnames, $newidxnames);
  foreach ($arr AS $key)
  { $substr = "";
    if($oldindexes[$key]["index_columns"] != $newindexes[$key]["index_columns"])
	  $substr .= "old fields=".$oldindexes[$key]["index_columns"]."; new fields=".$newindexes[$key]["index_columns"]."; "; 
    if($oldindexes[$key]["non_unique"] != $newindexes[$key]["non_unique"])
	{ if($oldindexes[$key]["non_unique"] == "0") $substr .= "Old: Not Unique; "; else $substr .= "Old: Unique; ";
	  if($newindexes[$key]["non_unique"] == "0") $substr .= "New: Not Unique; "; else $substr .= "New: Unique; ";;
	}
	if($substr !="")
	  $str .= " ".$key.": ".$substr;
  }
  if($str != "")
  { if(!$changed)
	{ $changed = true;
	  echo "<br><b>Different Index fielding:</b> ";
	}
	echo $str;
  }
     
  if($table == "shop")  /* get default theme */
  { $res = dbxquery($conn, "SELECT * FROM "._DB_PREFIX_."shop order by id_shop"); /* we will set all shops to this theme */
    $row=mysqli_fetch_array($res);
    if (_PS_VERSION_ >= "1.7.0") $default_theme = $row["theme_name"]; 	  
    else $default_theme = $row["id_theme"]; 
  }
  
  if($table == "shop_url") /* prepare preserving domain and directory of the new shop. */
  { $res = dbxquery($conn, "SELECT * FROM "._DB_PREFIX_."shop_url order by id_shop"); /* we will set all shops to this theme */
    $row=mysqli_fetch_array($res);
    $newdomain = $row["domain"];
    $newdir = $row["physical_uri"];
  }
  
  /* 127.0.0.1 and localhost are the same; so they can be copied directly */
  $oldserver = strtolower(_OLD_SERVER_);
  if(($oldserver == "127.0.0.1") OR ($oldserver == "::1")) $oldserver = "localhost";
  $newserver = strtolower(_DB_SERVER_);
  if(($newserver == "127.0.0.1") OR ($newserver == "::1")) $newserver = "localhost";  
  
  if($copy_mode == "all")
  { $query = "TRUNCATE TABLE `"._DB_NAME_."`.`"._DB_PREFIX_.$table."`";
    $res = dbxquery($conn, $query); 
  }

  /* do now things that are easiest with an empty database: 
   *   fixing indexes and changing character sets
   */
  if(in_array($table, $index_fixers) || in_array('all', $index_fixers))
  { $has_auto_increment = false;
	echo "<br><b>Destroying indexes and copying them from the old shop</b>";
    $qry = "SELECT index_name, group_concat(column_name) as index_columns
	FROM information_schema.statistics
	WHERE table_schema = '"._DB_NAME_."' AND table_name = '"._DB_PREFIX_.$table."'
	GROUP BY index_name";
    $rs = dbxquery($conn, $qry); 
	/* dropping PRIMARY key produced mysql error 1075 */
	$str = "ALTER TABLE `"._DB_PREFIX_.$table."`";
	$first = true;
	while($rw = mysqli_fetch_assoc($rs))
	{ // an auto_increment field MUST be a (primary?) index.
	  // for that reason dropping the primary index on an auto_increment field 
	  // will produce a Mysql 1075 error.
	  if(($rw["index_name"] == "PRIMARY") && (!strpos($rw["index_columns"],",")))
	  { $rx = dbxquery($conn,"SHOW COLUMNS FROM "._DB_PREFIX_.$table." WHERE Field='".$rw["index_columns"]."'");
		$rowx = mysqli_fetch_array($rx);
		if(stripos($rowx['Extra'], "AUTO_INCREMENT") !== false)
		{ $has_auto_increment = $rw["index_columns"];
		  continue;
		}
	  }
	  if($first) $first=false; else $str .= ",";
	  if($rw["index_name"] == "PRIMARY")
	    $str .= " DROP PRIMARY KEY";  
	  else
		$str .= " DROP INDEX ".$rw["index_name"];
	}
	$rstr = dbxquery($conn, $str); /* remove all indexes */
	
	/* now copy those from the old database */
	$idxquery = "select index_name, index_type, non_unique,
       group_concat(column_name order by seq_in_index) as index_columns
		from information_schema.statistics
		where table_schema='"._OLD_NAME_."' AND table_name='"._OLD_PREFIX_.$table."'
		group by index_schema, index_name, index_type, non_unique
		order by index_schema,index_name";
	$idxres = dbxquery($oldconn, $idxquery);
		  
	$qry = "ALTER TABLE `"._DB_PREFIX_.$table."`";
	$first = true;
	while($idxrow = mysqli_fetch_array($idxres)) 
	{ if(($idxrow["index_name"] == "PRIMARY") && $has_auto_increment)
		  continue;
      if($first) $first=false; else $qry .= ", ";
	  if($idxrow["index_name"] == "PRIMARY")
		$qry .= " ADD PRIMARY KEY(";
	  else if ($idxrow["non_unique"] == "0")
		$qry .= " ADD UNIQUE KEY `".$idxrow["index_name"]."` (";
	  else
		$qry .= " ADD KEY `".$idxrow["index_name"]."` (";	
	  $qry .= "`".str_replace(",","`,`",$idxrow["index_columns"])."`)";
	}
	$rs = dbxquery($conn, $qry);
  }  /* end of if(in_array($table, $index_fixers)) */
  
  if($copy_mode == "none") return; /* stop here with $field_fixing_only */
  
  /* Remove duplicate key problems */
  if(in_array($table, $duplicate_key_removers))
  { $res = mysqli_query($conn, 'select 1 from `'._DB_PREFIX_.$table.'_orig` LIMIT 1');
	if (mysqli_errno($conn) == 1146) /* table not found */
	{ $res = dbxquery($conn, "RENAME TABLE `"._DB_PREFIX_.$table."` TO `"._DB_PREFIX_.$table."_orig`");
	  $res = dbxquery($conn, "CREATE TABLE `"._DB_PREFIX_.$table."` (SELECT * FROM `"._DB_PREFIX_.$table."_orig`)");
	}
	else 
	{ if(mysqli_errno($conn) > 0)
		  echo mysqli_error($conn);
	  else
	  { $duplicate_key_removers = [];  /* disable duplicate key removing */
		echo "<b><p>TABLE `"._DB_PREFIX_.$table."_orig` should have been renamed back.
		  Duplicate keys will not be removed!!!</b><br>";
	  }
	}
   }
  
  if($copy_data_via_file == 0)
  { $args = "`".implode("`,`", array_intersect($newfields, $oldfields))."`";
//    if($table == "specific_price_priority")  /* PS 1.4.5 problem. */
//	  copy_specific_price_priority_direct($table, $args);
//	else
	if($copy_mode == "all")
	  copy_table_direct($table, _DB_PREFIX_, $args, $newextras);
	else // $copy_mode == "diff" or "fields"
	{ $tempprefix = _DB_PREFIX_."PRESTOOLS_";
	  $res = dbxquery($conn, "CREATE TEMPORARY TABLE `".$tempprefix.$table."` LIKE `"._DB_PREFIX_.$table."`");
	  copy_table_direct($table, $tempprefix, $args, $newextras); /* this handles a.o. the language transformations */
  	  copy_table_indexed($table, $tempprefix, $args, $newextras);
	  
	  $res = dbxquery($conn, "DROP TEMPORARY TABLE `".$tempprefix.$table."`");
	}
  }
  else 
  { $args = "";
    foreach($newfields AS $newfield)
    { if(in_array($newfield, $oldfields))
	    $args .= ",`".$newfield."`";
	  else
	    $args .= ",NULL";
	}
    $args = substr($args,1); /* remove leading comma */
    if($table == "specific_price_priority")
	  copy_specific_price_priority_via_file($table, $args);
    else
      copy_table_via_file($table, $args);
  }
  
  if(in_array($table, $duplicate_key_removers) || in_array('all', $duplicate_key_removers))
  { echo "<br><b>Duplicate keys removal: checking ".sizeof($uniqueindexes)." keys</b>";
    foreach($uniqueindexes AS $ikey => $fields)
	{ $flds = explode(",",$fields);
	  $query = "SELECT ".$fields.", count(*) AS cntr FROM `"._DB_PREFIX_.$table."`";
	  $query .= " GROUP BY ".$fields." HAVING cntr > 1";
	  $res = dbquery($query);
	  echo "<br> - ".$ikey." (".$fields."): ".mysqli_num_rows($res)." sets: ";
	  $first=true;
	  while($row = mysqli_fetch_assoc($res))
	  { echo $row['cntr']."(";
		if($first) $first=false; else echo ", ";
		$tquery = "DELETE FROM `"._DB_PREFIX_.$table."` WHERE 1";
		$fst = true;
		foreach($flds AS $fld)
		{ if($fst) $fst=false; else echo ",";
		  $tquery .= " AND ".$fld."='".mysqli_real_escape_string($row[$fld])."'";
		  echo $fld."=".$row[$fld].",";
		}
		$cntr = intval($row["cntr"]);
		$tquery .= " LIMIT ".($cntr-1);
        $tres = dbquery($tquery);
		echo "<br>";  
	  }
	} 

    $query = "INSERT INTO `"._DB_PREFIX_.$table."_orig` (SELECT * FROM `"._DB_PREFIX_.$table."`)";
    $res = dbxquery($conn, $query); 
    if(!$res) 
      sql_error($conn, $query); 
  
    $res = dbxquery($conn, "DROP TABLE `"._DB_PREFIX_.$table."`"); 
    $res = dbxquery($conn, "RENAME TABLE `"._DB_PREFIX_.$table."_orig` TO `"._DB_PREFIX_.$table."`");
  }  
  
  if($oldlangfound && $newlangfound)
  { lang_process($table);
	echo " lang";
  }
  else if ($oldlangfound || $newlangfound)
  { echo " <b>Language mismatch</b> ";
  }
  if($table == "shop")
  { if (_PS_VERSION_ >= "1.7.0")
      $query = "UPDATE `"._DB_PREFIX_."shop` SET theme_name='".$default_theme."'"; /* set all theme's to default */
	else
      $query = "UPDATE `"._DB_PREFIX_."shop` SET id_theme='".$default_theme."'"; /* set all theme's to default */
    $res = dbxquery($conn, $query); 
  }
  if($table == "shop_url")
  { $res = dbxquery($conn, "UPDATE `"._DB_PREFIX_."shop_url` SET domain='".mysqli_real_escape_string($conn,$newdomain)."', domain_ssl='".mysqli_real_escape_string($conn,$newdomain)."',physical_uri='".mysqli_real_escape_string($conn,$newdir)."' WHERE id_shop=1");
  }
  
  $query = "INSERT INTO `"._DB_PREFIX_._PRESTOOLS_PREFIX_."copy_shopdata` SET tablename='".$table."', date_upd=NOW()"; 
  $query .= " ON DUPLICATE KEY UPDATE date_upd=NOW()";
  $res = dbxquery($conn, $query);
}

function copy_table_via_file($table, $args)
{ global $conn, $oldconn, $basepath;
  $tablefile = $basepath."copy_shopdata_".$table.".dtx";
  if(file_exists($tablefile ))
    unlink($tablefile ); 
  $query = "SELECT ".$args." INTO OUTFILE '".$tablefile."' FROM `"._OLD_PREFIX_.$table."`";
  $res = dbxquery($oldconn, $query); 
  if(!$res) 
      sql_error($oldconn, $query); 
  $query = "LOAD DATA INFILE '".$tablefile."' INTO TABLE `"._DB_PREFIX_.$table."` CHARACTER SET 'utf8'"; 
  $res = dbxquery($conn, $query); 
  if(!$res) 
      sql_error($conn, $query);
}

/* copy_table_direct can only be used when the two databases are on the same server */
/* $covermode handles tables like ps_image where prior to PS 1.6.1 the options for cover 
   where 0 and 1 and after 1.6.1 NULL and 1 */
/* covermodesets has format: table => (indexname, indexfields, field that must be converted 0 to NULL) */
$covermodesets = array('image'=>array('id_product_cover','id_product,cover','cover')
,'image_shop'=>array('id_product','id_product,id_shop,cover','cover')
,'product_attribute'=>array('product_default','id_product,default_on','default_on')
,'product_attribute_shop'=>array('id_product','id_product,id_shop,default_on','default_on')
);
function copy_table_direct($table, $newprefix, $args, $newextras)
{ global $conn, $oldconn, $covermodechange,$covermodesets,$oldversion, $indirect_copy;

  if(isset($covermodesets[$table]) && version_compare(_PS_VERSION_ , "1.6.1", ">=") && version_compare($oldversion , "1.6.1", "<"))
  { $query = "SELECT * FROM INFORMATION_SCHEMA.STATISTICS WHERE table_schema = '"._DB_NAME_;
    $query .= "' AND table_name = '".$newprefix.$table."' AND index_name = '".$covermodesets[$table][0]."'";
	$res = dbxquery($conn, $query);
	if(mysqli_num_rows($res) > 0) /* only delete the index when it exists */
      $res = dbxquery($conn, "DROP INDEX ".$covermodesets[$table][0]." ON `"._DB_NAME_."`.`".$newprefix.$table."`");
  }  
  $oldargs = $args;
  if(($table == "currency")&& version_compare(_PS_VERSION_ , "1.7.6", ">=") && version_compare($oldversion , "1.7.0", "<"))
  { $oldargs .= ",iso_code_num";
    $args .= ",numeric_iso_code";
  }
  if((in_array($table, array("product","product_shop")))&& version_compare(_PS_VERSION_ , "1.7.1", ">=") && version_compare($oldversion , "1.7.1", "<"))
  { $oldargs .= ",id_product_redirected";
    $args .= ",id_type_redirected";
  }
  
  if(!$indirect_copy)
  { $query = "INSERT INTO `"._DB_NAME_."`.`".$newprefix.$table."` (".$args.") SELECT ".$oldargs." FROM `"._OLD_NAME_."`.`"._OLD_PREFIX_.$table."`";
  $res = dbxquery($conn, $query); 
  if(!$res) 
      sql_error($conn, $query); 
  }
  else
  { $query = "SELECT ".$oldargs." FROM `"._OLD_NAME_."`.`"._OLD_PREFIX_.$table."`";
    $res = dbxquery($oldconn, $query); 
	while($row = mysqli_fetch_assoc($res))
	{ $iquery = "INSERT INTO `"._DB_NAME_."`.`".$newprefix.$table."` (".$args.") VALUES (";
	  $first = true;
	  foreach($row AS $fld => $val)
	  { if($first) $first=false; else $iquery.= ",";
	    if(is_null($val))
		  $iquery.= "NULL";
		else
	      $iquery .= "'".mysqli_real_escape_string($conn, $val)."'";
	  }
	  $iquery .= ")";
	  $ires = dbxquery($conn, $iquery); 
      if(!$res) 
        sql_error($conn, $query); 
	}
  }
  
  if(isset($covermodesets[$table]) && version_compare(_PS_VERSION_ , "1.6.1", ">=") && version_compare($oldversion , "1.6.1", "<"))
  { if(($table=="image_shop") && in_array("id_product",$newextras))
    { $res = dbxquery($conn, "SELECT * FROM `"._DB_NAME_."`.`".$newprefix."image`");
      while($row = mysqli_fetch_assoc($res))
	  { $uquery = "UPDATE `"._DB_NAME_."`.`".$newprefix."image_shop` SET id_product=".$row["id_product"];
//        $uquery .= ", cover=";
//		if(!$row["cover"]) $uquery .="NULL"; else $uquery .="'1'";
		$uquery .= " WHERE id_image=".$row["id_image"];
		$ures = dbxquery($conn,$uquery);
	  }
	  /* deal with not found in ps_image */
	  $res = dbxquery($conn, "DELETE FROM `"._DB_NAME_."`.`".$newprefix."image_shop` WHERE id_product=0");
	}
	
	if(($table=="product_attribute_shop") && in_array("id_product",$newextras))
    { $res = dbxquery($conn, "SELECT * FROM `"._DB_NAME_."`.`".$newprefix."product_attribute`");
      while($row = mysqli_fetch_assoc($res))
	  { $uquery = "UPDATE `"._DB_NAME_."`.`".$newprefix."product_attribute_shop` SET id_product=".$row["id_product"];
//		$uquery .= ", default_on=";
//		if(!$row["default_on"]) $uquery .="NULL"; else $uquery .="'1'";
		$uquery .= " WHERE id_product_attribute=".$row["id_product_attribute"];
		$ures = dbxquery($conn,$uquery);
	  }
	  /* deal with not found in ps_product_attribute */
	  $res = dbxquery($conn, "DELETE FROM `"._DB_NAME_."`.`".$newprefix."product_attribute_shop` WHERE id_product=0");
	}
	
	/* remove doubles that might obstruct setting of unique indexes */
	if($table=="image") 
	  uniquify_one($newprefix.'image', 'id_product', 'cover','position');
	if($table=="image_shop") 
	  uniquify_one($newprefix.'image_shop', 'id_product', 'cover','');
	if($table=="product_attribute_shop");
	  uniquify_one($newprefix.'product_attribute', 'id_product', 'default_on','price');
	if($table=="product_attribute_shop");
	  uniquify_one($newprefix.'product_attribute', 'id_product', 'default_on','price');
    $qry = "UPDATE `"._DB_NAME_."`.`".$newprefix.$table."` SET ".$covermodesets[$table][2]."=NULL WHERE ".$covermodesets[$table][2]."=0";
    $res = dbxquery($conn, $qry);
	$qry = "ALTER TABLE `"._DB_NAME_."`.`".$newprefix.$table."` ADD UNIQUE KEY `".$covermodesets[$table][0]."` (".$covermodesets[$table][1].")";
    $res = dbxquery($conn, $qry);
  }
}

/* this is a help function for upgrades that cross the 1.6.1 border */
/* make sure that for each $key there is only one $flipflop with value 1 */
/* we test for a shop prefix to see whether id_shop is an extra key */
/* the first row accoring to the $sortorder will remain 1 */
function uniquify_one($table, $key, $flipflop, $sortorder)
{ $query = "SELECT ".$key.", count(*) AS counter";
  if(substr($table, -5) == "_shop") $query .= ",id_shop";
  $query .= " FROM ".$table." WHERE ".$flipflop."=1 GROUP BY ".$key;
  if(substr($table, -5) == "_shop") $query .= ",id_shop";
  $query .= " HAVING counter > 1";
  $res = dbquery($query);
  while($row = mysqli_fetch_array($res))
  { $tquery = "UPDATE ".$table." SET ".$flipflop."=NULL";
    $tquery .= " WHERE ".$key."=".$row[$key]." AND ".$flipflop."=1";
    if(substr($table, -5) == "_shop") $query .= " AND id_shop=".$row["id_shop"];
	if($sortorder != "")
	  $tquery .= " ORDER BY ".$sortorder." DESC";
	$cnt = (int)$row["counter"] - 1;
	$tquery .= " LIMIT ".$cnt;
    $tres = dbquery($tquery);
  } 
}

/* copy_mode is "diff" or "fields" */
function copy_table_indexed($table, $tempprefix, $args, $newextras)
{ global $conn, $oldconn, $covermodechange,$covermodesets,$oldversion, $copy_mode;
  $oldargs = $args;
  
	/* find the primary key elements */
	$idxquery = "select index_name, index_type, non_unique,
       group_concat(column_name order by seq_in_index) as index_columns
		from information_schema.statistics
		where table_schema='"._DB_NAME_."' AND table_name='"._DB_PREFIX_.$table."'
		AND index_name='PRIMARY'
		group by index_schema, index_name, index_type, non_unique
		order by index_schema,index_name";
	$idxres = dbxquery($oldconn, $idxquery);
	if(mysqli_num_rows($idxres) == 0)
	{ echo " No PRIMARY Key in new ".$table."!!";
	  $idxquery = "select index_name, index_type, non_unique,
       group_concat(column_name order by seq_in_index) as index_columns
		from information_schema.statistics
		where table_schema='"._OLD_NAME_."' AND table_name='"._OLD_PREFIX_.$table."'
		AND index_name='PRIMARY'
		group by index_schema, index_name, index_type, non_unique
		order by index_schema,index_name";
	  $idxres = dbxquery($conn, $idxquery);
	  if(mysqli_num_rows($idxres) == 0)
	  { echo " No PRIMARY Key in old ".$table."!!";
	    return;
	  }
	}
	$idxrow = mysqli_fetch_assoc($idxres);
	$idxcols = explode(",", $idxrow["index_columns"]);
		  
	if($copy_mode == "diff")
	{ /* prevent unique key violations for cover and default_on */
	  if(in_array($table, array("image","image_shop")))
		$oldargs = str_replace("`cover`", "NULL", $oldargs);
	  if(in_array($table, array('product_attribute','product_attribute_shop')))
		$oldargs = str_replace("`default_on`", "NULL", $oldargs);
	  /* add keys that were added since previous copy */
	  $query = "INSERT INTO `"._DB_NAME_."`.`"._DB_PREFIX_.$table."` (".$args.") SELECT ".$oldargs." FROM `"._DB_NAME_."`.`".$tempprefix.$table."` o WHERE NOT EXISTS (SELECT NULL FROM `"._DB_NAME_."`.`"._DB_PREFIX_.$table."` m WHERE 1 ";
      foreach($idxcols AS $col)
	    $query .= " AND o.".$col."=m.".$col;
	  $query .= ")";
      $res = dbxquery($conn, $query); 
	  
	  /* delete entries that were deleted since last copy */
	  $query = "DELETE `"._DB_NAME_."`.`"._DB_PREFIX_.$table."` FROM `"._DB_NAME_."`.`"._DB_PREFIX_.$table."` WHERE NOT EXISTS (SELECT 1 FROM `"._DB_NAME_."`.`".$tempprefix.$table."` m WHERE 1 ";
      foreach($idxcols AS $col)
	    $query .= " AND `"._DB_NAME_."`.`"._DB_PREFIX_.$table."`.".$col."=m.".$col;
	  $query .= ")";
      $res = dbxquery($conn, $query);  
	  
	  /* update fields of existing rows */
	  $argarr = explode(",",$args);
	  $notidxs = array_diff($argarr, $idxcols);
	  $conditions = [];
	  foreach($idxcols AS $col)
	    $conditions[] = "t1.".$col."=t2.".$col;
	  $setters = [];
	  foreach($notidxs AS $col)
	    $setters[] = "t1.".$col."=t2.".$col;
	  $query = "UPDATE `"._DB_NAME_."`.`"._DB_PREFIX_.$table."` AS t1";
	  $query .= " INNER JOIN `"._DB_NAME_."`.`".$tempprefix.$table."` AS t2 ON ";
	  $query .= implode(" AND ", $conditions);
	  $query .= " SET ";
	  $query .= implode(", ", $setters);
      $res = dbxquery($conn, $query); 
	  
	  /* following section is copied from integrity-repair.php. */
	  /* It sets the cover/ default_on flag for the just imported records */
	  if($table == "image")
	  { $squery = "SELECT DISTINCT i.id_product FROM "._DB_PREFIX_."image i";
	    $squery .= " LEFT OUTER JOIN "._DB_PREFIX_."product p ON p.id_product=i.id_product";
        $squery .= " WHERE i.id_product NOT IN (SELECT id_product FROM "._DB_PREFIX_."image";
        $squery .= " WHERE cover=1)"; 
        $squery .= " AND NOT p.id_product is NULL";
        $sres=dbquery($squery);
        while ($srow=mysqli_fetch_array($sres)) 
        { $tquery = "SELECT id_image FROM "._DB_PREFIX_."image_shop";
          $tquery .= " WHERE id_product=".$srow['id_product']." AND cover=1"; 
	      $tres=dbquery($tquery);
	      $uquery = "UPDATE "._DB_PREFIX_."image";
          $uquery .= " SET cover=1 WHERE id_product=".$srow['id_product'];
	      if(mysqli_num_rows($tres) > 0)
	      { list($id_image) = mysqli_fetch_row($tres);
	        $uquery .= " AND id_image=".$id_image;
	      }
	      else
	        $uquery .= " LIMIT 1";
          $ures=dbquery($uquery);
        }
	  }
	  
	  $xres = dbquery("SELECT GROUP_CONCAT(id_shop) FROM "._DB_PREFIX_."shop WHERE active=1 AND deleted=0");
	  list($myshops) = mysqli_fetch_row($xres);
	  $shops = explode(",",$myshops);
  
	  if($table == "image_shop")
	  { foreach($shops AS $shop)
		{ $squery = "SELECT DISTINCT i.id_product FROM "._DB_PREFIX_."image_shop i";
		  $squery .= " LEFT OUTER JOIN "._DB_PREFIX_."product p ON p.id_product=i.id_product";
		  $squery .= " WHERE id_shop=".$shop." AND i.id_product NOT IN (SELECT id_product FROM "._DB_PREFIX_."image_shop";
		  $squery .= " WHERE cover=1) AND id_shop=".$shop.""; 
          $squery .= " AND NOT p.id_product is NULL";
          $sres=dbquery($squery);
		  while ($srow=mysqli_fetch_array($sres)) 
          { $tquery = "SELECT id_image FROM "._DB_PREFIX_."image";
            $tquery .= " WHERE id_product=".$srow['id_product']." AND cover=1"; 
	        $tres=dbquery($tquery);
	        $uquery = "UPDATE "._DB_PREFIX_."image_shop";
            $uquery .= " SET cover=1 WHERE id_product=".$srow['id_product']." AND id_shop=".$shop;
	        if(mysqli_num_rows($tres) > 0)
	        { list($id_image) = mysqli_fetch_row($tres);
	          $uquery .= " AND id_image=".$id_image;
	        }
			else
			  $uquery .= " LIMIT 1";
			$ures=dbquery($uquery);
		  }
		}
	  }
//================
	  if($table == "product_attribute")
	  { $squery = "SELECT DISTINCT i.id_product FROM "._DB_PREFIX_."product_attribute i";
        $squery .= " LEFT OUTER JOIN "._DB_PREFIX_."product p ON p.id_product=i.id_product";
        $squery .= " WHERE i.id_product NOT IN (SELECT id_product FROM "._DB_PREFIX_."product_attribute";
        $squery .= " WHERE default_on=1)"; 
        $squery .= " AND NOT p.id_product is NULL";
        $sres=dbquery($squery);
        while ($srow=mysqli_fetch_array($sres)) 
        { $tquery = "SELECT id_product_attribute FROM "._DB_PREFIX_."product_attribute_shop";
          $tquery .= " WHERE id_product=".$srow['id_product']." AND default_on=1"; 
	      $tres=dbquery($tquery);
	      $uquery = "UPDATE "._DB_PREFIX_."product_attribute";
          $uquery .= " SET default_on=1 WHERE id_product=".$srow['id_product'];
		  if(mysqli_num_rows($tres) > 0)
	      { list($id_product_attribute) = mysqli_fetch_row($tres);
	        $uquery .= " AND id_product_attribute=".$id_product_attribute;
		  }
		  else
	        $uquery .= " LIMIT 1";
          $ures=dbquery($uquery);
		}
	  }
  
	  if($table == "product_attribute_shop")
	  { foreach($shops AS $shop)
	    { $squery = "SELECT DISTINCT i.id_product FROM "._DB_PREFIX_."product_attribute_shop i";
          $squery .= " LEFT OUTER JOIN "._DB_PREFIX_."product p ON p.id_product=i.id_product";
          $squery .= " WHERE id_shop=".$shop." AND i.id_product NOT IN (SELECT id_product FROM "._DB_PREFIX_."product_attribute_shop";
          $squery .= " WHERE default_on=1) AND id_shop=".$shop.""; 
          $squery .= " AND NOT p.id_product is NULL";
          $sres=dbquery($squery);
          while ($srow=mysqli_fetch_array($sres)) 
          { $tquery = "SELECT id_product_attribute FROM "._DB_PREFIX_."product_attribute";
            $tquery .= " WHERE id_product=".$srow['id_product']." AND default_on=1"; 
	        $tres=dbquery($tquery);
	        $uquery = "UPDATE "._DB_PREFIX_."product_attribute_shop";
            $uquery .= " SET default_on=1 WHERE id_product=".$srow['id_product']." AND id_shop=".$shop;
	        if(mysqli_num_rows($tres) > 0)
	        { list($id_product_attribute) = mysqli_fetch_row($tres);
	          $uquery .= " AND id_product_attribute=".$id_product_attribute;
	        }
			else
			  $uquery .= " LIMIT 1";
		    $ures=dbquery($uquery);
		  }
		}
	  }
	}
	else if($copy_mode == "fields")
	{ /* to be implemented */
	} 
}

/* since 1.4.5 the ps_specific_price_priority table has got an extra unique key that makes that you can only have one row per product */
/* the solution below will work for most shops */
function copy_specific_price_priority_direct($table, $args)
{ global $conn, $oldconn;
  $query = "INSERT INTO `"._DB_NAME_."`.`"._DB_PREFIX_.$table."` (SELECT ".$args." FROM `"._OLD_NAME_."`.`"._OLD_PREFIX_.$table."`)";
  $query .= " ON DUPLICATE KEY UPDATE `"._DB_NAME_."`.`"._DB_PREFIX_.$table."`.id_product=`"._DB_NAME_."`.`"._DB_PREFIX_.$table."`.id_product";
  $res = dbxquery($oldconn, $query); 
  if(!$res) 
      sql_error($oldconn, $query); 
}

function copy_specific_price_priority_via_file($table, $args)
{ global $conn, $oldconn, $basepath;
  $tablefile = $basepath."copy_shopdata_".$table.".dtx";
  if(file_exists($tablefile ))
    unlink($tablefile ); 
  echo " ** ";
  $query = "SELECT ".$args." INTO OUTFILE '".$tablefile."' FROM `"._OLD_PREFIX_.$table."` GROUP BY id_product";
  $res = dbxquery($oldconn, $query); 
  if(!$res) 
      sql_error($oldconn, $query); 
  $query = "LOAD DATA INFILE '".$tablefile."' INTO TABLE `"._DB_PREFIX_.$table."` CHARACTER SET 'utf8'"; 
  $res = dbxquery($conn, $query); 
  if(!$res) 
      sql_error($conn, $query);
}


function sql_error($con, $query) 
{ $error = mysqli_error($con);
  $full_error = "<p>MySQL error ".mysqli_errno($con).": ".$error."<br>Generated by Query '".$query."' <p>";
  die($full_error);
}

function update_config_value($conf, $insert_flag)
{   global $conn, $oldconn, $conf_validation, $conf_notvalidated, $oldlang_list, $newlang_list;
    $query = 'SELECT c.*,GROUP_CONCAT(id_lang) AS langs FROM `'._OLD_PREFIX_.'configuration` c';
	$query .= ' LEFT JOIN `'._OLD_PREFIX_.'configuration_lang` cl ON c.id_configuration=cl.id_configuration';
	$query .= ' WHERE name = "'.$conf.'" AND id_shop_group IS NULL and id_shop IS NULL';
	$query .= ' GROUP BY c.id_configuration';
    $res = dbxquery($oldconn, $query);
    if(mysqli_num_rows($res) > 0)
    { $row = mysqli_fetch_array($res);
	  if(($row["id_shop_group"]!= NULL) || ($row["id_shop"]!= NULL))
	  { echo ", Skipped non zero shops for ".$conf."<br>";
   	    return false;  /* too hairy: we will deal only with the most simple cases here */
	  }
	  if(($row['value'] == NULL) && ($row['langs'] == ""))
	  { echo ", Skipped null value for ".$conf."<br>";
		  return false; 
	  }  
	  if(!isset($conf_validation[$conf]))
	  { if(!in_array($conf,$conf_notvalidated))
	    { echo ", <b>No validation known for ".$conf."</b><br>";
		  return false;
		}
		else
		{ echo "<b>Not Validated Config:</b> ";
		  $conf_validation[$conf] = ".*";
	    }
	  }
	     /* the preg_match flag /u catches unicode. It is needed for accented chars */
	  if(($conf_validation[$conf] != "") && ($row['value']!="") && (!preg_match("/^".$conf_validation[$conf]."$/u", $row['value'])))
	  { echo ", <b>invalid ".$conf." (".$row['value'].")</b><br>";
		return false; 
	  }
	  
	  $nquery = 'SELECT value, id_configuration FROM '._DB_PREFIX_.'configuration WHERE name = "'.$conf.'"'; 
      $nres = dbxquery($conn, $nquery);
      if(mysqli_num_rows($nres) > 0)
      { $nrow = mysqli_fetch_array($nres);
		if($nrow["value"] != $row["value"]) /* update only when values are different */
		{ if($row["value"] != NULL)
		    $query = 'UPDATE `'._DB_PREFIX_.'configuration` SET value="'.$row['value'].'"';
		  else
		    $query = 'UPDATE `'._DB_PREFIX_.'configuration` SET value=NULL'; 
	      $query .= ', date_upd="'.date("Y-m-d H:i:s", time()).'"';
		  $query .= ' WHERE name = "'.$conf.'"';
		  $res = dbxquery($conn, $query);
		  echo ", updating ".$conf; 
		}
 		$newconfid = $nrow['id_configuration'];
	  }
	  else if ($insert_flag)
      { $query = 'INSERT IGNORE INTO `'._DB_PREFIX_.'configuration` SET value="'.$row['value'].'", name = "'.$conf.'", date_add="'.date("Y-m-d H:i:s", time()).'",date_upd="'.date("Y-m-d H:i:s", time()).'"';
		$res = dbxquery($conn, $query);
		$newconfid = mysqli_insert_id($conn);
		echo ", inserting ".$conf." AS ".$newconfid;
      }	
	  else /* for module related entries that are only changed when present */
		return false;
	  if($row['langs'] != "") /* if this entry is also in ps_configuration_lang */
	  { $langquery = 'SELECT * FROM `'._OLD_PREFIX_.'configuration_lang` WHERE id_configuration = "'.$row["id_configuration"].'"'; 
        $langres = dbxquery($oldconn, $langquery);
	    $langrows = array();
	    while($langrow = mysqli_fetch_assoc($langres))
		{ if(!$langrow["date_upd"]) /* if it is NULL use present data-time */
		    $langrow["date_upd"] = date('Y-m-d H:i:s');  
		  $langrows[$langrow["id_lang"]] = $langrow;
		}
		  
		$delquery = 'DELETE FROM `'._DB_PREFIX_.'configuration_lang` WHERE id_configuration='.$newconfid;
		$delres = dbxquery($conn, $delquery);
		  
		$len = sizeof($oldlang_list);
		for($i=0; $i<$len; $i++)
		{ $insquery = 'INSERT INTO `'._DB_PREFIX_.'configuration_lang` SET id_configuration='.$newconfid;
		  $insquery .= ',id_lang='.$newlang_list[$i];
		  $insquery .= ',value="'.mysqli_real_escape_string($conn,$langrows[$oldlang_list[$i]]["value"]);
		  $insquery .= '",date_upd="'.mysqli_real_escape_string($conn,$langrows[$oldlang_list[$i]]["date_upd"]).'"';
		  $insres = dbxquery($conn, $insquery);
		}
		echo ", Setting conf_lang for ".$conf."; ";
	  }
		
	  return true;
    }
	return false;
}

/* check_configs() checks whether there is a validation line for every copied configuration table entry */
/* this is a maintainance function that normally isn't used */
function check_configs()
{ global $conf_values, $conf_update_values, $conf_validation;
  echo "checking configs:<br>";
  foreach($conf_values AS $conf_value)
    if(!isset($conf_validation[$conf_value]))
	  echo $conf_value."<br>";
  foreach($conf_update_values AS $conf_value)
    if(!isset($conf_validation[$conf_value]))
	  echo $conf_value."<br>";
  echo "Finished!";
}

 function emptyCache()
 { global $triplepath, $verbose;
   if($verbose=="true") echo "<br>Deleting caches";
   if(version_compare(_PS_VERSION_ , "1.7.0.0", "<"))
   { delTree($triplepath.'cache/smarty/cache', false, array('index.php'));
     delTree($triplepath.'cache/smarty/compile', false, array('index.php'));
   }
   else
   { 
	 delTree($triplepath.'var/cache', true, array(''));
   }	 
   if($verbose=="true") echo "<br>XML cache - skipped";
   $excluders = array('index.php','default.xml','themes','.htaccess');
   if(version_compare(_PS_VERSION_ , "1.7.0.0", ">="))
   { $tquery="select theme_name AS directory FROM "._DB_PREFIX_."shop";
     $tres=dbquery($tquery);
     while($trow = mysqli_fetch_array($tres))
	 { if(is_dir($triplepath.'themes/'.$trow["directory"].'/cache'))
	   { if($verbose=="true") echo "<br>Del ".$trow["directory"]." theme cache";
	     delTree($triplepath.'themes/'.$trow["directory"].'/cache', false, array('ie9','index.php'));
	   }
	 }
   }
   else
   {
     $tquery="select directory, id_theme FROM "._DB_PREFIX_."theme";
     $tres=dbquery($tquery);
     while($trow = mysqli_fetch_array($tres))
	   $excluders[] = $trow["directory"].".xml";		/* such files are in the themes directory and not at risk, but as PS does this I added these too */
//   delTree($triplepath.'config/xml', false, $excluders);  // skipped as I am not sure that PS may not change content in future versions
   // Media::clearCache() clear the caches of the templates
     mysqli_data_seek($tres, 0);
     while($trow = mysqli_fetch_array($tres))
     { /* some themes are in the database but no longer in the file system. */
	   if(!is_dir($triplepath.'themes/'.$trow["directory"]))
	   { $cquery="select id_shop, active FROM ". _DB_PREFIX_."shop WHERE id_theme=".$trow['id_theme']." ORDER BY active DESC";
         $cres=dbquery($cquery);
         if(mysqli_num_rows($cres) == 0) continue; /* no shop. this should be harmless */
	     $crow = mysqli_fetch_array($cres);
	     $active = "";
	     if($crow["active"] == "0")
		   $active = "inactive";
	     echo "<br><b>No directory found for ".$active." theme ".$trow["directory"]."</b>";
	     continue; 
	   }
	   if(is_dir($triplepath.'themes/'.$trow["directory"].'/cache'))
	   { if($verbose=="true") echo "<br>Del ".$trow["directory"]." theme cache";
	     delTree($triplepath.'themes/'.$trow["directory"].'/cache', false, array('ie9','index.php'));
	   }
	 }
   }
   delTree('temp', false, array());
   dbquery("UPDATE ". _DB_PREFIX_."configuration SET value=value+1 WHERE name='PS_CCCJS_VERSION'");
   dbquery("UPDATE ". _DB_PREFIX_."configuration SET value=value+1 WHERE name='PS_CCCCSS_VERSION'"); 
   if(version_compare(_PS_VERSION_ , "1.7.0.0", "<"))
   { del_class_index_file(realpath($triplepath."cache/class_index.php"));
   }
   
  /* clear cache_default_attribute. They may cause faulty prices. However, normally it should stay around */
  /* See http://stackoverflow.com/questions/21694442/prestashop-product-showing-wrong-price-in-category-page-but-right-in-the-produc */
//  $query = "UPDATE "._DB_PREFIX_."product SET cache_default_attribute='0'";
//  $res = dbquery($query); 
//  $query = "UPDATE "._DB_PREFIX_."product_shop SET cache_default_attribute='0'";
//  $res = dbquery($query); 
 }
 
 function delTree($dir, $delself, $excluders = array()) 
 {  if(!file_exists($dir)) return;
    $mydir = scandir($dir);
    $files = array_diff($mydir, array('.','..','.svn'));
    if(!is_array($files)) colordie("Error scanning dir ".$dir);
    foreach ($files as $file) 
	{ if(in_array($file,$excluders)) continue;
      if (is_dir("$dir/$file")) 
		 delTree("$dir/$file", true);
	  else
		 unlink("$dir/$file"); 
    } 
	if($delself)
	  rmdir($dir); 
 }
 
 function del_class_index_file($rootlink)
{  if($rootlink && file_exists($rootlink))
   { @chmod($rootlink, 0777); // is this needed?
	 if(unlink($rootlink))
	   echo "cleaned class index<br>";
	 else
	   echo "error cleaning the class index. Try manually deleting ".$rootlink."<br>";
   }
   else echo "No index";
}	